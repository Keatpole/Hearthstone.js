import type { Card, Player } from "@Game/internal.js";
import type { Event, UnknownEventValue } from "@Game/types.js";
import type { Card as _VanillaCard } from "@hearthstonejs/vanillatypes";

export type VanillaCard = _VanillaCard;

/**
 * Ai scored card
 */
export type ScoredCard = {
	card: Card;
	score: number;
};

/**
 * The type of the card.
 */
export enum Type {
	Undefined = 0,
	Minion = 1,
	Spell = 2,
	Weapon = 3,
	Hero = 4,
	HeroPower = 5,
	Location = 6,
}

/**
 * The class that the card belongs to.
 */
export enum Class {
	Neutral = 0,
	DeathKnight = 0,
	DemonHunter = 1,
	Druid = 2,
	Hunter = 3,
	Mage = 4,
	Paladin = 5,
	Priest = 6,
	Rogue = 7,
	Shaman = 8,
	Warlock = 9,
	Warrior = 10,
}

/**
 * The rarity of the card.
 */
export enum Rarity {
	Free = 0,
	Common = 1,
	Rare = 2,
	Epic = 3,
	Legendary = 4,
}

/**
 * What the card costs.
 */
export enum CostType {
	Mana = 0,
	Armor = 1,
	Health = 2,
}

/**
 * The school of the spell.
 */
export enum SpellSchool {
	None = 0,
	Arcane = 1,
	Fel = 2,
	Fire = 3,
	Frost = 4,
	Holy = 5,
	Nature = 6,
	Shadow = 7,
}

/**
 * The tribe of the minion.
 */
export enum Tribe {
	None = 0,
	All = 1,
	Beast = 2,
	Demon = 3,
	Dragon = 4,
	Elemental = 5,
	Mech = 6,
	Murloc = 7,
	Naga = 8,
	Pirate = 9,
	Quilboar = 10,
	Totem = 11,
	Undead = 12,
}

/**
 * Card keywords.
 */
export enum Keyword {
	DivineShield = 0,
	Dormant = 1,
	Lifesteal = 2,
	Poisonous = 3,
	Reborn = 4,
	Rush = 5,
	Stealth = 6,
	Taunt = 7,
	Tradeable = 8,
	Forge = 9,
	Windfury = 10,
	Outcast = 11,
	CastOnDraw = 12,
	SummonOnDraw = 13,
	Unbreakable = 14,
	UnlimitedAttacks = 15,
	Charge = 16,
	MegaWindfury = 17,
	Echo = 18,
	Magnetic = 19,
	Twinspell = 20,
	Elusive = 21,
	Frozen = 22,
	Immune = 23,
	Corrupt = 24,
	Colossal = 25,
	Infuse = 26,
	Cleave = 27,
	Titan = 28,
	Forgetful = 29,
	CantAttack = 30,
}

/**
 * All Card abilities.
 */
export enum Ability {
	Create = 0,
	Adapt = 1,
	Battlecry = 2,
	Cast = 3,
	Combo = 4,
	Deathrattle = 5,
	Finale = 6,
	Frenzy = 7,
	HonorableKill = 8,
	Infuse = 9,
	Inspire = 10,
	Invoke = 11,
	Outcast = 12,
	Overheal = 13,
	Overkill = 14,
	Passive = 15,
	Spellburst = 16,
	StartOfGame = 17,
	HeroPower = 18,
	Use = 19,
	Placeholders = 20,
	Condition = 21,
	Remove = 22,
	HandPassive = 23,
	Tick = 24,
	HandTick = 25,
	Test = 26,
}

/**
 * Card Enchantment object.
 */
export type EnchantmentDefinition = {
	enchantment: string;
	owner: Card;
};

/**
 * A backup of a card.
 */
export type CardBackup = {
	[key in keyof Card]: Card[key];
};

/**
 * The ability of a card.
 */
export type AbilityCallback = (
	owner: Player,
	self: Card,
	key?: Event,
	_unknownValue?: UnknownEventValue,
	eventPlayer?: Player,
) => unknown;

/**
 * The abilities that a blueprint can have. (From CardAbility)
 */
type BlueprintAbilities = {
	[Property in Ability]?: AbilityCallback;
};

/**
 * The blueprint of a card.
 *
 * If a field doesn't have:
 * ### This is required for Xs and Ys
 * Then it is required by every card.
 */
export type Blueprint = {
	// Common
	/** The name of the card. This doesn't have to be unique. */
	name: string;
	/**
	 * The text / description of the card. You should describe what the card DOES in here.
	 *
	 * Try to take inspiration from Vanilla (Hearthstone by Blizzard), which describes enough for the user to know what the card does, without the nuances.
	 */
	text: string;
	/** How much the card should cost. This is normally in mana. */
	cost: number;
	/** The type of the card. For example; "Minion" / "Spell" / "Weapon", etc... */
	type: Type;
	/** The classes that the card belongs to. For example; ["Neutral"], ["Mage"], ["Paladin", "Rogue"] */
	classes: Class[];
	/** The rarity of the card. This doesn't really do much in this game since there isn't any lootbox mechanics here. Examples of rarities: "Legendary", "Epic", "Free", etc... */
	rarity: Rarity;
	/** If the card should be allowed in decks / card pools. */
	collectible: boolean;
	/**
	 * The id of the card. This should be unique per blueprint as it differentiates blueprints from each other.
	 *
	 * This should be automatically generated by the card creator.
	 *
	 * You can find the latest id in `cards/.latestId`. If you want to set the id manually, increment the number by 1 (remember to save the file), and put the resulting id here. Example: `.latestId` says 5, increment it to 6, save the file, set the blueprint's id to 6.
	 */
	id: number;

	// Type specific
	/**
	 * ### This is required for Minions and Weapons
	 *
	 * The amount of attack that the card has.
	 */
	attack?: number;
	/**
	 * ### This is required for Minions and Weapons
	 *
	 * The amount of health that the card has.
	 */
	health?: number;
	/**
	 * ### This is required for Minions
	 *
	 * The tribe of the card. For example; "Beast", "Naga", "All", "None", etc...
	 */
	tribe?: Tribe;

	/**
	 * ### This is required for Spells
	 *
	 * The school of the spell. For example; "Fire", "Arcane", "Fel", etc...
	 */
	spellSchool?: SpellSchool;

	/**
	 * ### This is required for Locations
	 *
	 * The amount of durability that the location card has.
	 *
	 * Every time a location card gets used, its durability is decreased by 1. When it reaches 0, the location card breaks.
	 */
	durability?: number;
	/**
	 * ### This is required for Locations
	 *
	 * The cooldown of the location card. Im pretty sure that, in vanilla, this number is always 2.
	 *
	 * Every time a location card gets used, its cooldown is set to this value. Every turn, the cooldown of the card gets decreased by 1 until it reaches 0, then it can be used.
	 */
	cooldown?: number;

	/**
	 * ### This is required for Heroes
	 *
	 * The amount of armor that the player should gain when playing the card.
	 */
	armor?: number;
	/**
	 * ### This is required for Heroes
	 *
	 * The id of the hero power card for the hero.
	 *
	 * The hero power card should be of type "Heropower", and its `heropower` ability will be triggered every time the player uses their hero power.
	 */
	heropowerId?: number;
} & BlueprintAbilities;

export type BlueprintWithOptional = Blueprint & {
	runes?: string;
	keywords?: Keyword[];
};
